/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xaxidma.h"
#include "xparameters.h"

#include "xil_io.h"
#include "audio.h"
#include "oled.h"

/*
 * Device hardware build related constants.
 */

#define DMA_DEV_ID		XPAR_AXIDMA_0_DEVICE_ID

//#define MEM_BASE_ADDR		(XPAR_PS7_DDR_0_S_AXI_BASEADDR + 0x1000000)
#define MEM_BASE_ADDR		(XPAR_PS7_DDR_0_S_AXI_BASEADDR + 0x10000000)

#define TX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00100000)
#define RX_BUFFER_BASE		(MEM_BASE_ADDR + 0x00300000)
#define RX_BUFFER_HIGH		(MEM_BASE_ADDR + 0x004FFFFF)

#define MAX_PKT_LEN_WORDS	128/*8*/
#define MAX_PKT_LEN			MAX_PKT_LEN_WORDS*4

#define TEST_START_VALUE	0xC

#define NUMBER_OF_TRANSFERS	1/*10*/

/************************** Function Prototypes ******************************/

int XAxiDma_SimplePollExample(u16 DeviceId, Xint16 *pInput, u32 *pOutput);
static int CheckData(u32 *RxPacket);

/************************** Variable Definitions *****************************/
/*
 * Device instance definitions
 */
XAxiDma AxiDma;

#define WIN_NUM 8

#define NOISE_SAMPLE_SIZE 1000
#define NOISE_SAMPLE_START 150

#define SIMULATE_INPUT 0

u32 *ret;
u32 spectrum[128];

int main()
{
	int Status;

    init_platform();
	xil_printf("\r\n--- Entering main() --- \r\n");
	int i;
	int j;

	ret = (u32 *) RX_BUFFER_BASE;

	Xint16 audio_data[128];
	u8 *oled_equalizer_buf=(u8 *)malloc(128*sizeof(u8));//WARNING bro...: -Wimplicit-function-declaration

	/* -------- LED and HW related -------- */
	Xil_Out32(OLED_BASE_ADDR,0xff);
	OLED_Init();			//oled init
	IicConfig(XPAR_XIICPS_0_DEVICE_ID);
	AudioPllConfig(); //enable core clock for ADAU1761
	AudioConfigure();

	xil_printf("ADAU1761 configured\n\r");

	u32 buffer[WIN_NUM][128];
	u32 avrg[128]; // need init to 0
	u32 spectrum_out[128];
	u32 noise[128]; // need init to 0;
	u32 count_noise = 1;
	u32 count_avrg = 0;
	u32 count_win = 0;

	// --- prepare for the loop ---
	count_noise = 1;
	count_avrg = 0;
	count_win = 0;
	for(i=0;i<128;i++) {
		avrg[i] = 0;
		noise[i] = 0;
	}

	/* ### MAIN LOOP ### */
	for(i=0;i<150;i++) {

#if (SIMULATE_INPUT == 1)
	int temp;
	for(j=0;j<128;j++) {
		// sawtooth input
		/*if (j<50) temp = j;
		else if (j<100) temp = j - 50;
		else temp = j - 100;
		audio_data[j] = temp;*/
		audio_data[j] = j;
	}
#else
    // capture audio data
    get_audio(audio_data);
#endif

	/* Run the poll example for simple transfer */
	Status = XAxiDma_SimplePollExample(DMA_DEV_ID, audio_data, ret);

	if (Status != XST_SUCCESS) {

		xil_printf("XAxiDma_SimplePollExample: Failed\r\n");
		return XST_FAILURE;
	}

	for(j=0;j<128;j++) {
		//xil_printf("\n\r0x%X ", (unsigned int)ret[j]);
		//xil_printf("\n\r%d ", audio_data[j]);

		/* ### MAGNITUDE ### */
		spectrum[j] = ( (Xint16)(ret[j]) ) * ( (Xint16)(ret[j]) ) + ((Xint16)(ret[j]>>16)) * ((Xint16)(ret[j]>>16));
		//xil_printf("\n\r0x%X ", (unsigned int)spectrum[j]);
		//xil_printf("\n\r%d ", (unsigned int)spectrum[j]);

		/* ### AVERAGING ### */
    	if (count_avrg < WIN_NUM) {
    		// filling up the buffer, 0 to 7
    		buffer[count_win][j] = spectrum[j];
    		// put in initial LIFO average until reach 8 elements (aka WIN_NUM)
    		avrg[j] = avrg[j] + spectrum[j];
    		// just pass out the original data as output
    		spectrum_out[j] = spectrum[j];
    	}
    	else {
    		// LIFO average: kick out old data, replace with new. so always works on 8 elements (aka WIN_NUM)
    		avrg[j] = avrg[j] - buffer[count_win][j] + spectrum[j];
    		buffer[count_win][j] = spectrum[j];
    		// divide by 8 (aka WIN_NUM)
    		spectrum_out[j] = (avrg[j] >> 3);
    		//spectrum[j] = (avrg[j] >> 3);
    	}
    	//xil_printf("\n\r0x%X ", (unsigned int)spectrum[j]);
    	//xil_printf("\n\r%d ", (unsigned int)spectrum_out[j]);

    	/* ### NOISE CANCELATION ### */
    	if ( (count_noise > NOISE_SAMPLE_START) && (count_noise < (NOISE_SAMPLE_START+NOISE_SAMPLE)) ) {
			// build up noise profile by keep averaging the input, thus smoothing the noise profile
			// taken from Tutorial-2
			noise[i] = ((count_noise-1)/count_noise) * noise[i] + spectrum_out[i]/count_noise;

		}

    	// noise profile is ready, put it at work
    	// for initial condition, it;s ok since we init noise[i] to 0.
		spectrum_out[i] = spectrum_out[i] - noise[i];

		//xil_printf("\n\r%d ", (unsigned int)spectrum_out[j]);

    	oled_equalizer_buf[i] = (u8)(spectrum_out[i] >> 6);//10);//4);
    	//DEBUG: xil_printf("oled[%d]=%d\n\r", i, oled_equalizer_buf[i]);

    	if (oled_equalizer_buf[i] >= 40) {
    		oled_equalizer_buf[i] = 40;
    	}

	}

	// --- prepare for next loop ---
	if (count_noise<(NOISE_SAMPLE_START+NOISE_SAMPLE)) count_noise++;
	if (count_avrg<WIN_NUM) count_avrg++;

	count_win++;
	if (count_win>=WIN_NUM) count_win = 0;

	xil_printf("XAxiDma_SimplePollExample: Passed\r\n");

    OLED_Clear();
    OLED_Equalizer_128(oled_equalizer_buf);

	}

	xil_printf("--- Exiting main() --- \r\n");

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
* The example to do the simple transfer through polling. The constant
* NUMBER_OF_TRANSFERS defines how many times a simple transfer is repeated.
*
* @param	DeviceId is the Device Id of the XAxiDma instance
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if error occurs
*
* @note		None
*
*
******************************************************************************/
int XAxiDma_SimplePollExample(u16 DeviceId, Xint16 *pInput, u32 *pOutput)
{
	XAxiDma_Config *CfgPtr;
	int Status;
	int Tries = NUMBER_OF_TRANSFERS;
	int Index;
	u32 *TxBufferPtr;
	u32 *RxBufferPtr;
	//u32 Value;

	TxBufferPtr = (u32 *)TX_BUFFER_BASE;
	RxBufferPtr = (u32 *)RX_BUFFER_BASE;

	/* Initialize the XAxiDma device.
	 */
	CfgPtr = XAxiDma_LookupConfig(DeviceId);
	if (!CfgPtr) {
		xil_printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}

	Status = XAxiDma_CfgInitialize(&AxiDma, CfgPtr);
	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed %d\r\n", Status);
		return XST_FAILURE;
	}

	if(XAxiDma_HasSg(&AxiDma)){
		xil_printf("Device configured as SG mode \r\n");
		return XST_FAILURE;
	}

	/* Disable interrupts, we use polling mode
	 */
	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
						XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK,
						XAXIDMA_DMA_TO_DEVICE);

	//Value = 0;

	for(Index = 0; Index < MAX_PKT_LEN_WORDS; Index ++) {
			TxBufferPtr[Index] = (u32)pInput[Index];//Value;
			//Value++;
	}
	/* Flush the SrcBuffer before the DMA transfer, in case the Data Cache
	 * is enabled
	 */
	Xil_DCacheFlushRange((u32)TxBufferPtr, MAX_PKT_LEN);

	for(Index = 0; Index < Tries; Index ++) {


		Status = XAxiDma_SimpleTransfer(&AxiDma,(u32) RxBufferPtr,
					MAX_PKT_LEN, XAXIDMA_DEVICE_TO_DMA);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		Status = XAxiDma_SimpleTransfer(&AxiDma,(u32) TxBufferPtr,
					MAX_PKT_LEN, XAXIDMA_DMA_TO_DEVICE);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		while (XAxiDma_Busy(&AxiDma,XAXIDMA_DMA_TO_DEVICE)) {
				/* Wait */
		}
		while (XAxiDma_Busy(&AxiDma,XAXIDMA_DEVICE_TO_DMA)) {
				/* Wait */
		}

		Status = CheckData(pOutput);
		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

	}

	/* Test finishes successfully
	 */
	return XST_SUCCESS;
}



/*****************************************************************************/
/*
*
* This function checks data buffer after the DMA transfer is finished.
*
* @param	None
*
* @return
*		- XST_SUCCESS if validation is successful.
*		- XST_FAILURE otherwise.
*
* @note		None.
*
******************************************************************************/
static int CheckData(u32 *RxPacket)
{
	//u32 *RxPacket;
	//int Index = 0;

	//RxPacket = (u32 *) RX_BUFFER_BASE;

	/* Invalidate the DestBuffer before receiving the data, in case the
	 * Data Cache is enabled
	 */
	Xil_DCacheInvalidateRange((u32)RxPacket, MAX_PKT_LEN);

	//xil_printf("Data received: ");
	//for(Index = 0; Index < MAX_PKT_LEN_WORDS; Index++) {
	//	xil_printf("0x%X ", (unsigned int)RxPacket[Index]);
	//}
	//xil_printf("\r\n");

	return XST_SUCCESS;
}
